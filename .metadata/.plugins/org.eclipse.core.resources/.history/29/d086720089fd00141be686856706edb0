package gif;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

public class UncompGen {
	public HashMap<Character, Color> colors=new HashMap<Character, Color>();
	public final String fileprefix;
	JFrame frame;
	public int max=0;
	public int modenum=0;
	public int modetwo=0;
	public HashMap<Integer, Integer> mode= new HashMap<Integer, Integer>();
	public File a;
	public HashMap<Character, String> basetobase= new HashMap<Character, String>();
	JFrame panel;
	double width;
	double height;
	JTextField acolor;
	JTextField ccolor;
	JTextField tcolor;
	JTextField gcolor;
	int sqrt;
	int numchars;
	JTextField xsize;
	JTextField ysize;
	int squareheight;
	int squarewidth;
	boolean pair=false;
	ArrayList<ColorCounter> list;
	JScrollPane scroll;
	int vert=0;
	int labx;
	int laby;
	Dimension dim;
	BufferedImage image;
	int counter;
	File saver;
	
	public UncompGen(File save, String pre, JTextField xs, JTextField ys) {
		fileprefix = pre;
		colors.put('a', Color.red.darker());
		colors.put('g', Color.green.darker());
		colors.put('c', Color.blue.darker());
		colors.put('t', Color.yellow.darker());
		colors.put('n', Color.BLACK);
		basetobase.put('a', "Adenine");
		basetobase.put('g', "Guanine");
		basetobase.put('t', "Thymine");
		basetobase.put('n', "Unknown");
		basetobase.put('c', "Cytosine");
		xsize=xs;
		ysize=ys;
		saver=save;
	}
	public void readList(File f, int q){
		//System.out.println("Hi"+Runtime.getRuntime().maxMemory());
		try{
			saver.createNewFile();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		boolean t=true;
		StringBuilder s=new StringBuilder();
		int c;
		int n;
		char ch='@';
		int total=0;
		int dots=0;
		boolean inlast=false;
		boolean ranone=false;
		boolean rantwo=false;
		boolean ranthree=false;
		try{
			FileReader countz = new FileReader(new File(f.getParentFile().getAbsolutePath()+fileprefix+f.getName().substring(0, f.getName().indexOf("."))+".counter"));
			BufferedReader cin = new BufferedReader(countz);
			String counts = cin.readLine();
			int num = Integer.parseInt(counts.substring(counts.indexOf("to")+3));
			cin.close();
			countz.close();
			list = new ArrayList<ColorCounter>(num);
			FileReader ist = new FileReader(f);
			BufferedReader in = new BufferedReader(ist);
			while(t==true){
				//System.out.println(Runtime.getRuntime().freeMemory());
				c=in.read();
				//System.out.println((char)c);
				if (ch=='z'){
					inlast=true;
					s=new StringBuilder();
				}
				//System.out.println("Dots: "+dots);
				if (c==-1){
					numchars=Integer.parseInt(s.toString());
					t=false;
				}
				else if (inlast){
					//System.out.println((char)c);
					ch='@';
					if ((char)c=='z'){
						dots++;
					}
					else{
						s.append((char)c);
						//System.out.println(s.toString());
					}
					if (dots==1&&!ranone){
						//System.out.println("s:"+s.toString());
						max=Integer.parseInt(s.toString());
						s=new StringBuilder();
						ranone=true;
					}
					else if (dots==2&&!rantwo){
						//System.out.println("s:"+s.toString());
						modenum=Integer.parseInt(s.toString());
						s=new StringBuilder();
						rantwo=true;
					}
					else if (dots==3&&!ranthree){
						//System.out.println("s:"+s.toString());
						counter=Integer.parseInt(s.toString());
						s=new StringBuilder();
						ranthree=true;
					}
				}
				else if ((char)c!=ch&&(char)c!='0'&&ch!='@'){
					n=Integer.parseInt(s.toString().replace(ch, '1'), 2);
					//System.out.println(s.toString().replace(ch, '1'));
					//System.out.println(n);
					if (n>20000){
						n=20000;
					}
					total+=n;
					counter++;
					//System.out.println(total);
					//System.out.println(ch+", "+n);
					//System.out.println(total);
					for (int z = 0; z<n; z++){
						list.add(new ColorCounter(n, ch, total));
					}
					s= new StringBuilder();
					ch=(char)c;
					s.append((char)c);
				}
				else if ((char)c!=ch&&(char)c!='0'){
					ch=(char)c;
					s.append((char)c);
				}
				else{
					s.append((char)c);
				}				
			}
			in.close();
			ist.close();
			//list.trimToSize();
		}
		catch(Throwable e){
			e.printStackTrace();
			System.out.println(e.getCause());
		}
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		list.trimToSize();
		width = screenSize.getWidth();
		height = screenSize.getHeight();
		numchars=total;
		System.out.println("End 1");
		if (q==1){
			makeImage();
		}
		else if (q==-1){
			makeSnakeImage();
		}
	}
}
